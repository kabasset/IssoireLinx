namespace Cnes {
/**

\addtogroup basics


\section basics-intro Introduction


A raster is an N-dimensional array of pixels stored in a contiguous one-dimensional container.
The number of axes, or dimension, N, is set at compile time or at runtime.
The raster shape, i.e. the lengths along axes, is set at runtime.
Pixels are located at N-dimensional positions, which convert to 1D indices in the underlying 1D container.

There are other common names for similar concepts, like multidimensional array, ND array, or tensor.
The term raster was chosen to convey some information on the memory contiguity and layout (see next section),
because it is part of the public interface of the library, and not only an implementation detail.


\section basics-memory Memory layout


The pixel ordering scheme is row-major, which means that two adjacent pixels of the same row (along the axis of index 0) are contiguous in memory.
The last pixel of a row immediately precedes the first pixel of the next row,
and the last pixel of the last row of a plane immediately precedes the first pixel of the first row of the next plane.

There is no physical geometry associated with the image.
In particular, no assumption is made on the orientation of the axes.
Graphically, positions are represented from left to right, from bottom to top and from front to back,
but that is only for the purpose of documentation.
The following figure shows the index of each pixel of a raster of shape (4, 3, 2).
It will be used in the remaining of the documentation in code snippets.

\image html doc/diagrams/raster_ordering.svg


\section basics-container Underlying container


The pixel values can be stored in any contiguous container.
The most standard option is a `std::vector` (use this by default).
A raster built on top of a `std::vector` (with default allocator) is of type `VecRaster`.
Here is a simple example to build the `VecRaster` illustrated in the section above
(`std::iota()` is used to fill the 1D container with increasing values):

\snippet RasterDemoBasics_test.cpp VecRaster iota

It is also possible to dynamically augment any 1D contiguous container
with the raster features (e.g. ND indexing or operations) thanks to the `PtrRaster` class,
in which the underlying container is a raw pointer.
For example:

\snippet RasterDemoBasics_test.cpp PtrRaster iota

Last but not least, it is also possible to use your own container,
assuming that it provides the minimal interface, e.g.:

\snippet RasterDemoBasics_test.cpp MallocRaster

Which can be used like any other raster:

\snippet RasterDemoBasics_test.cpp MallocRaster iota

\section basics-access Element access

As disclosed in the examples above, elements of a raster can be accessed with 1D indices or ND positions.
Indexes are 0-based signed integers, which enables backward indexing with `Raster::at()`, e.g.:

\snippet RasterDemoBasics_test.cpp Element access

As a standard contiguous container, `Raster` also provides access as iterators,
which are explicitely raw pointers (as opposed to `std::vector` but like `eastl::vector`)
to ensure compiler optimizations are maximal.
Methods `Raster::begin()` and `Raster::end()` enable range for loops
and should be used with standard functions like algorithms.
The following blocks are all functionally equivalent:

\snippet RasterDemoBasics_test.cpp Foreach element

*/
}