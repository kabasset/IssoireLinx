namespace Cnes {
/**

\addtogroup data_classes


\section data_classes-intro Class hierarchy overview


As presented in \ref basics, the library's main class is `Raster`.
It is built as a composition of various composites (mixins and base classes), each responsible for a set of features.
This page presents the different sets, while the design is described in details in \ref design.

A `Raster` object relies on some underlying 1D contiguous container of arbitrary type
-- raw array, `std::vector`, `std::array`...
The container is adapded by some data holder, which provides the necessary interface for compatibility with `Raster`.
This means in particular that it implements a `size()` and a `data()` method.
This is the only responsibility of the data holder.

The data holder is embedded in a `DataContainer`, which brings the standard container interface
-- `begin()`, `end()`, `operator[]()`, `operator==()` and co --
as well as pixel-wise operators like `+`, `-`, `*`, and `/` (see \ref pixelwise).

Finally, `Raster` provides the multidimensional features:
shape, indexing scheme, views.

A simplified overview is represented in the class diagram below:

\image html doc/diagrams/data_classes.svg


\section data_classes-holder Data holder


\section data_classes-flavors Raster flavors


The library comes with three specializations of `Raster` by through the implementation of dedicated data holders:

- `PtrRaster<T, N>` is a `Raster<T, N, T*>`, which means that the data is accessed via a raw pointer.
  It is a non-owning container: no allocation or free is made; a `PtrRaster`'s memory is managed externally.
  This is the type which is preferred to represent contiguous views, e.g. with `Raster::section()`.
- `VecRaster<T, N>` is a `Raster<T, N, DataContainerHolder<std::vector<T>>>`, i.e. the underlying container is a `std::vector`.
  It is convenient to interface with the standard library or other tools which work with `std::vector`s without copies,
  because `std::vector` itself cannot be initialized without copies from an external pointer.
- `AlignedRaster<T, N>` is a `Raster<T, N, AlignedBuffer<T>>`,
  where `AlignedBuffer<T>` is a wrapper of `T*` which may or not manage memory,
  but at least ensures that memory is correctly aligned for SIM instructions (generally, 16-byte aligned):
  - If the `AlignedRaster` is constructed from a size only, then some memory will be allocated,
    which will be aligned accoding to the compilation platform to ensure smooth usage of SIMD instructions;
  - If it is constructed from a non-null pointer, it will act as a `PtrRaster`, i.e. not allocate or free memory,
    but will verify that the memory is well aligned (or throw an exception otherwise).

*/
}
