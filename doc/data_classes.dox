namespace Cnes {
/**

\addtogroup data_classes


\section data_classes-intro Class hierarchy overview


As presented in \ref basics, the library's main class is `Raster`.
It is built as a composition of various composites (mixins and base classes), each responsible for a set of features.
This page presents the different sets, while the design is described in details in \ref design.

A `Raster` object relies on some underlying 1D contiguous container of arbitrary type
-- raw array, `std::vector`, `std::array`...
The container is adapded by some data holder, which provides the necessary interface for compatibility with `Raster`.
This means in particular that it implements a `size()` and a `data()` method.
This is the only responsibility of the data holder.

The data holder is embedded in a `DataContainer`, which brings the standard container interface
-- `begin()`, `end()`, `operator[]()`, `operator==()` and co.


Finally, `Raster` provides the multidimensional features:
shape, indexing scheme and views,
as well as pixel-wise operators (like `+`, `-` and `*`), and mathematical functions (like `abs()`, `min()` and `exp()`).
For more details, see \ref pixelwise.

A simplified class diagram is depicted below:

\image html doc/diagrams/data_classes.svg


\section data_classes-holder Data holder


The holder can be any class which satisfies `SizedData` requirements.
Whatever the container it wraps, it must expose the methods a `Raster` expects:
see `SizedData`.
Users can implement their own holders if those provided (see next section) are not enough.
Here is a simple example of a custom holder and associated `Raster` specialization
(see example \ref RasterDemoBasics_test.cpp):

\snippet RasterDemoBasics_test.cpp MallocRaster

Given that `Raster` inherits from the holder,
methods can be implemented in the holder and then called from the raster.
For example, the holder of `AlignedRaster` (see next section) implements method `alignment()`.
This method can be called from an `AlignedRaster` object:

\code
  AlignedRaster<double> raster({1024, 1024}); // FIXME as snippet
  BOOST_TEST(raster.alignment() > 16);
\endcode


\section data_classes-flavors Raster flavors


The library comes with three specializations of `Raster` through the implementation of dedicated data holders.

\par `PtrRaster<T, N> = Raster<T, N, DataContainerHolder<T*>>`

`PtrRaster` is a \copybrief PtrRaster
\copydetails PtrRaster

\par `VecRaster<T, N> = Raster<T, N, DataContainerHolder<std::vector<T>>>`

`VecRaster` is a \copybrief VecRaster
\copydetails VecRaster

\par `AlignedRaster<T, N> = Raster<T, N, AlignedBuffer<T>>`

`AlignedRaster` is a \copybrief AlignedRaster
\copydetails AlignedRaster

*/
}
