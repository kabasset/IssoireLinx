namespace Linx {
/**

\addtogroup data_classes


\section data_classes-intro Introduction


As presented in \ref basics, the library's main class is `Raster`.
It is built as a composition of mixins and base classes,
each responsible for a specific set of features.
A mixin is a stateless class, which only adds methods to their child classes
(this is done following the CRTP idiom, see \ref crtp_refactoring).
In the end, the list of methods which `Raster` provides is the concatenation of the methods of each parent class.

Undestanding how `Raster` is made up helps finding the appropriate documentation.
This is the purpose of the current page, while the design is described in details in \ref design.


\section data_classes-overview Overview


A `Raster` object can rely on some underlying 1D contiguous container of arbitrary type
-- raw array, `std::vector`, `std::array`...
The container is adapded by a so-called _data holder_, which provides the necessary interface for compatibility with `Raster`.
This means in particular that it implements `begin()` and `end()`.
This is the only responsibility of the data holder.

The data holder is embedded in a `DataContainer`, which brings:
- The standard container interface
  -- `size()`, `empty()`, `operator[]()`, `operator==()` and co --
  through the `ContiguousContainerMixin`.
- Constructors and filling methods: see \ref raster_ctors.

Finally, `Raster` provides:
- The multidimensional features: properties, indexing scheme and views.
- Pixel-wise operators (like `+`, `-` and `*`) of `EuclidArithmetic` requirements
  thanks to `ArithmeticMixin`.
- Mathematical functions (like `abs()`, `min()` and `exp()`) from `MathFunctionsMixin`.

For more details, see \ref pixelwise.

The class diagram is as follows:

\image html doc/diagrams/data_classes.svg


\section data_classes-holder Data Holder


The holder can be any class which satisfies `ContiguousRange` requirements.
Whatever the container it wraps, it must expose the methods a `Raster` expects:
see `ContiguousRange`.
Users can implement their own holders if those provided (see next section) are not enough.
Here is a simple example of a custom holder and associated `Raster` specialization
(see example \ref LinxDemoBasics_test.cpp):

\snippet LinxDemoBasics_test.cpp MallocRaster

Given that `Raster` inherits from the holder,
methods can be implemented in the holder and then called from the raster.
For example, the holder of `AlignedRaster` (`AlignedBuffer`, see next section) implements the method `alignment()`.
This method can be called from an `AlignedRaster` object.


\section data_classes-flavors Holder Flavors


The library comes with several specializations of `Raster` through the implementation of dedicated data holders.

\par `PtrHolder<T>`

The holder of `PtrRaster`, which merely points to some external data.
Memory is not allocated nor freed by the holder.

\par `StdHolder<TContainer>`

A holder which wraps the contiguous containers of the standard library:
`std::vector`, `std::valarray`, `std::array`.
It provides access to the container to avoid copies, e.g:

\snippet LinxDemoConstructors_test.cpp VecRaster moves

\par `AlignedBuffer<T>`

`AlignedBuffer` is a specialized holder, which guarantees memory alignment,
e.g. for use of SIMD extensions.
Data can be owned (allocated at construction, freed at destruction):

\snippet LinxDemoConstructors_test.cpp AlignedRaster owns

or shared like in the case of `PtrRaster`:

\snippet LinxDemoConstructors_test.cpp AlignedRaster shares

`AlignedBuffer` was specifically designed to interface smoothly with FFTW (see \ref dft).

*/
}
