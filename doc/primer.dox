namespace Litl {
/**

\addtogroup primer


\section primer-intro Introduction


Above all, Litl is an extensible data containers library.
The containers are made up from mixins and base classes, each responsible for a set of feature.
The main 1D container is `Sequence` while the main ND container is `Raster`.
Both aim at adding signal processing methods to any object which points to some contiguous memory
-- from a raw pointer to `std::vector` or any custom type --
without any cost.

Many more data containers are defined, which are all composed by picking the building blocks they need,
like `Vector`, `Matrix` or even `Chronometer`!

Let us first present the class hierarchy which results in `Sequence`,
before moving to `Raster`, and finally all of the other containers.


\section primer-sequence Sequences


TODO


\section primer-raster Rasters


A raster is an N-dimensional array of pixels internally stored in a contiguous one-dimensional container.
The `Raster` class is extensible and can accomodate any contiguous container.
The number of axes is set either at compile time or at runtime.
The raster shape, i.e. the lengths along axes, is set at runtime.
Pixels are located at N-dimensional positions, which convert to 1D indices in the underlying 1D container.
Speaking of indices, they are _signed_ integers, as recommended in the C++ Core Guidelines.
Among others, this enables backward indexing with negative values.

A variety of operations are supported, for example:
- Pixel-wise operators and functions;
- Local and global filters;
- Geometrical transforms;
- Global or local statistics estimators...

Before going further, a short digression on the naming of the library.
Why "raster" and not simply image or array?
Mostly for disambiguation purpose: "image" refers to an extension type of the FITS format
-- which is at the heart of EleFits, from which Litl was initially out-sourced --
while "array" has already several meanings in C/C++.
`NdArray` would have been an option, but every related class should have been prefixed with `Nd` for homogeneity:
`NdPosition`, `NdRegion`, `VecNdArray`...
"Tensor" is often used as a multidimensional extension of matrices,
but is more associated to linear algebra than image processing.
From the cathodic television era, "raster" also historically carries the concept of contiguous pixels which scan the image.
It is very common in the field of Earth observation, and also belongs to the Java library.
The term raster was also chosen to convey some information on the memory contiguity and layout (see next section),
and stress out that it is part of the public interface of the library, and not only an implementation detail.
All in all, "raster" seems to be a fair compromise. 


\section primer-memory Memory Layout


The pixel ordering scheme is row-major,
which means that two adjacent pixels of the same row (along the axis of index 0) are contiguous in memory.
The last pixel of a row immediately precedes the first pixel of the next row,
and the last pixel of the last row of a plane immediately precedes the first pixel of the first row of the next plane.

There is no physical geometry associated with the image.
In particular, no assumption is made on the orientation of the axes.
Graphically, positions are represented from left to right, from bottom to top and from front to back,
but that is only for the purpose of documentation.
The following figure shows the index of each pixel of a 3D raster of shape (4, 3, 2).
It will be used in the remaining of the documentation in code snippets.

\image html doc/diagrams/raster_ordering.svg


\section primer-type Pixel Type and Dimension


`Raster` is a class template.
Its first template paramer is the pixel type, `T`, which may be const-qualified for read-only rasters.
All fundamental types (Boolean, integers and floating point types) as well as `std::complex` types are supported,
i.e. have been unit tested.
Other types, including user-defined types, can be used (see for example \ref channels),
provided that they offer the minimal interface required by the `Raster` methods _which are effectively called_.
For example, `operator+()` must be defined in order to use `Raster::operator+()`,
but is not necessary if no method which would rely on it is called.
Indeed, the library relies a lot on template metaprogramming,
which can be seen as a compile time equivalent of Python's duck typing.

The second template parameter, `N`, is the raster dimension.
It can be set at compile time, as a positive or null integer,
or at runtime, using -1 as a special value.
This basically gives more freedom at the cost of less safety.
As a rule of thumb, compile time dimensions should be preferred.

Other multidimensional classes, like `Position` or `Region`,
are also templated by the dimension and follow the same convention.
Roughly speaking, `Position<N>` is similar to `std::array<Index, N>` when `N` is positive or null,
while `Position<-1>` is similar to `std::vector<Index>`.

Now, to introduce a few property names, we can state about the example raster that:

- its _dimension_ is 3;
- its _shape_ is (4, 3, 2);
- its _size_ is 24;
- the _lengths_ along its axes are 4, 3 and 2;
- the _position_ of its first pixel is (0, 0, 0);
- that of its last pixel is (3, 2, 1) or (-1, -1, -1);
- the _index_ of its first pixel is 0;
- that of its last pixel is 23 or -1;
- its _domain_ is ((0, 0, 0), (3, 2, 1)).

Finally, we've tried our best to follow the naming conventions of the standard and well-know libraries,
e.g. use "fill", "generate" or "linspace" to denote concepts analogous to `std::fill()`, `std::generate()` or `numpy.linspace()`.


\section primer-flavors Raster Flavors


Different flavors of rasters ship with the library.
They are specializations of the template class `Raster`.
Indeed, `Raster` takes a third template parameter, `THolder`,
which is used to decorate any 1D container with `Raster`'s interface.
Let us introduce here some of the specializations:

- The default raster type is simply `Raster<T, N>`.
  It will be described in details in the remainder of the documentation.
- `VecRaster<T, N, TAllocator>`, `ValRaster<T, N>` and `ArrRaster<T, Capacity, N>` are specializations
  which wrap `std::vector<T, TAllocator>`, `std::valarray<T>` and `std::array<T, Capacity>`, respectively.
  They are useful to interface with the standard containers without copies.
- `PtrRaster<T, N>` is a non-owning raster, i.e. it does not manage memory,
  but instead points to some existing, externally handled, data.
  It is intended to be used as a read-only or read/write view.

The class is extensible, in the sense that users can augment any contiguous memory with the raster interface.
This is a more advanced topic which is described in \ref adaptors.


\section primer-access Pixel Access


Elements of a raster can be accessed or modified with subscript operators and associated methods,
which take as input a 1D index or ND position.
Indices are 0-based signed integers of type `Index`.
Class `Position` is a contiguous container of indices, which is generally brace-initialized.
Using signed integers enables backward indexing, e.g. with method `Raster::at()`:

\snippet LitlDemoBasics_test.cpp Element access

As a standard contiguous container, `Raster` also provides element access through iterators,
which are explicitely raw pointers (as opposed to `std::vector` but like `eastl::vector`)
to ensure compiler optimizations are maximal.
Methods `Raster::begin()` and `Raster::end()` enable range for loops
and should be used with standard functions like algorithms.
The following blocks are all functionally equivalent:

\snippet LitlDemoBasics_test.cpp Foreach element

*/
}