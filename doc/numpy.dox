namespace Linx {
/**

\addtogroup numpy


\section numpy-basics Basics


Linx is a lower-level library than NumPy.
The main difference in the design of Linx is the fact that there is no abstraction of the memory layout, and no implicit allocation.
Rasters are always row-major ordered and contiguous in memory.
Going further, it is not possible to resize a raster, while ndarrays are reallocable.
When a non memory-contiguous view on a raster is needed, another class has to be used (`Patch`),
which is not the case with ndarrays.

Another major difference is the ordering of the axes.
Where NumPy uses linear algebra conventions (index by row, then column), Linx uses image conventions instead (x, then y),
and pixels are contiguous along the first axis (the image width).

NumPy:

\code{.py}
a = np.range(15, dtype=int).reshape((3, 5))
shape = a.shape  # [3, 5]
ndim = a.ndim  # 2
size = a.size  # 15
width = a.size[-1]  # 5
\endcode

Linx:

\code{.cpp}
auto a = Linx::Raster<int>({5, 3}).range();
auto shape = a.shape(); // [5, 3]
auto ndim = a.dimension(); // 2
auto size = a.size(); // 15
auto width = a.length(0); // 5
\endcode


\section numpy-creation Creation


By contrast with NumPy's creation based on size or nested iterables, the shape is always given to `Raster`'s constructor.
For convenience, `Sequence` is a 1D analogous of `Raster` which provides a few shortcuts.

NumPy:

\code{.py}
a = np.ones((2, 3, 4), dtype=np.int16)
x = np.linspace(0, 2 * np.pi, 100)
f = np.sin(x)
b = np.random.default_rng().random((2, 3))
c = np.array([[[  0,  1,  2],
               [ 10, 12, 13]],
              [[100, 101, 102],
               [110, 112, 113]]])
\endcode

Linx:

\code{.cpp}
auto a = Linx::Raster<std::int16_t, 3>({4, 3, 2}).fill(1);
auto x = Linx::Sequence<double>(100).linspace(0, 2 * Linx::pi<double>());
auto f = sin(x);
auto b = Linx::random<double>({3, 2});
auto c = Linx::Raster<double, 3>(
    {3, 2, 2},
    {0,  1,  2, 10, 12, 13, 100, 101, 102, 110, 112, 113});
\endcode


\section numpy-ops Operations


Like ndarrays, rasters and sequences support the classical pixelwise operations and mathematical functions.
As a rule of thumb, member methods (e.g. `raster.exp()`) modify the pixels in place,
while free functions (e.g. `exp(raster)`) create a new raster.

NumPy:

\code{.py}
a = np.array([20, 30, 40, 50])
b = np.arange(4)

# New instance

c = a - b
d = b ** 2
e = 10 * np.sin(a)
min = np.min(a)

# In place

a *= 3
b += a
np.exp(b, out=b)
\endcode

Linx:

\code{.cpp}
auto a = Linx::Sequence<double>{20, 30, 40, 50};
auto b = Linx::Sequence<double>(4).range();

// New instance

auto c = a - b;
auto d = pow(b, 2);
auto e = sin(a) * 10
auto min = a.min();

// In place

a *= 3;
b += a;
b.exp();
\endcode


\section numpy-indexing Indexing


As previously mentioned, the order of the axes is different in NumPy and Linx.
There are other divergences related to indexing.
For example, an ndarray is a collection of rows, while a raster is a collection of pixels.
Ndarrays can be viewed as a collection of pixels with `array.flat` while rasters can be viewed as a collection of rows with `rows(raster)`.

NumPy:

\code{.py}
# Creation

def f(y, x):
    return 10 * y + x

a = np.fromfunction(f, (5, 4), dtype=int)

# Access

some_pixel = a[2, 3]
last_pixel = a[-1, -1]
last_row = a[-1]

# Iteration

for pixel in a.flat:
    print(pixel)

for row in a:
    print(row)
\endcode

Linx:

\code{.cpp}
// Creation

int f(const Position<2>& p) {
  return 10 * p[0] + p[1];
}

Linx::Raster<int> a({4, 5});
a.generate(f, a.domain());

// Access

auto some_pixel = a[{3, 2}];
auto last_pixel = a[-1]; // or a[{-1, -1}]
auto last_row = a.row(-1);

// Iteration

for (const auto& pixel : a) {
  std::cout << pixel << std::endl;
}

for (const auto& row : rows(a)) {
  std::cout << row << std::endl;
}
\endcode

NumPy supports the classical Python's slicing syntax, which does not exist in C++.
Linx relies instead on dedicated region classes, like `Box` or `Grid`.
A view on a raster is called a patch.
Like NumPy's views, patches perform no copy and altering a patch means altering the parent raster.

NumPy:

\code{.py}
a = np.arange(100, dtype=int).reshape(10, 10)
b = a[1:5, 3, 6]
c = a[1:5:2, 3:6]
b += 1
\endcode

Linx:

\code{.cpp}
auto a = Linx::Raster<int>({10, 10}).range();
auto b = a | Linx::Box<2>({3, 1}, {6, 5});
auto c = a | Linx::Grid<2>({3, 1}, {6, 5}, {1, 2});
++b;
\endcode

As usual, syntax is more complex in C++.
Yet, the library is extensible and the variety of supported region types is virtually infinite.

NumPy:

\code{.py}
# Column

b = a[:2]

# Selector

a[a > 4] = 0

# L1-norm ball

y, x = np.ogrid(*a.shape)
l1_distance = np.abs(y - 4) + np.abs(x - 5)
ball = l1_distance <= 3  # Sequence of indices
c = a[ball]
\endcode

Linx:

\code{.cpp}
// Column

auto b = a.profile<1>(2);

// Selector

a.apply([](auto e) { return e > 4 ? 0 : e; });

// L1-norm ball

auto c = a | Linx::Mask<2>::ball<1>({5, 4}, 3);
\endcode

*/
}