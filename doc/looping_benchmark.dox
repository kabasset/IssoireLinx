namespace Cnes {
/**

\addtogroup looping_benchmark


\section looping_benchmark-model Simplistic computer model


The CPU executes instructions on input data to produce output data, e.g. `c = a + b`.
Data (and instructions) come from memory: disk, RAM, cache(s).
Processing a single instruction really consists in:
- Fetching data from memory,
- Decoding the instruction,
- Executing it,
- Reading or writing in registers,
- Writing output data to memory.

Each of the steps takes one CPU cycle.
A cycle is the unit of measuremet of time, a clock tick, e.g. from which the CPU frequency is derived.

Modern CPUs implement two models of parallelism -- instruction parallelism and data parallelism:
- _Single instruction, multiple data (SIMD)_, or _vectorization_,
  is a set of technologies (SSE, SSE2, SSE3, AVX, AVX2, AVX512...)
  to exectue the same instructions on several inputs at once.
  SIMD code is generated either by the compiler or by gurus!
- _Pipelining_ is the concept of starting to fetch instruction 2
  while instruction 1 is being decoded, and so on (see table below);
  this results in the CPU being processing several instructions per cycle.

<table class="fieldtable">
<tr><th>Instruction<th>Cycle 1<th>Cycle 2<th>Cycle 3<th>Cycle 4<th>Cycle 5
<tr><td>1<td>Fetch<td>Decode<td>Execute<td>Memory<td>Write
<tr><td>2<td><td>Fetch<td>Decode<td>Execute<td>Memory
<tr><td>3<td><td><td>Fetch<td>Decode<td>Execute
<tr><td>4<td><td><td><td>Fetch<td>Decode
</table>

Before reaching the CPU, data passes from RAM to _cache_.
Here is how a cache works:
- If the needed byte is in CPU cache, use it;
- Else, copy it from RAM to cache.

Actually, there are several levels of cache (L1, L2, L3);
The closer to the CPU, the smaller and faster.

Writing to cache is extremely slow, of the order of hundreds of cycles.
Using pipelining, a cache write can be up to a thousand times slower than an instruction.
That is a _cache miss_.
To mitigate this, caches are organized in lines.
When you need byte 42, the CPU caches bytes 43 to 105, too, just in case you'd need them later.
Then, accessing byte 43 is not a cache miss anymore.
This is why ensuring contiguity of pixels is of paramount importance.

Here is an overly simplified example to get orders of magnitude:
- `c = a + b;`
  - 1 instruction = 1 clock cycle (could be several instructions but you get the idea)
  - 3 cache misses = 600 clock cycles
  - = 602 clock cycles
- `for (int i = 0; i<64; ++i) { c[i] = a[i] + b[i]; }`
  - Accessing c[0] loads c[0] to c[63] in memory (one cache line)
  - 64 vectorized instructions = 8 clock cycles
  - 3 cache misses = 600 clock cycles
  - = 608 clock cycles <1% slower

Conclusion: The more instructions per cache miss, the better.

One of the key components for benefitting from parallelisms is the compiler,
which does an enormous amount of transforms to produce optimized instructions from code, like:
- Auto-inilining to avoid short functions = less sub-functions = better instruction locality;
- Intermediate variable generation = less recomputations + less memory accesses;
- Subscripting bypass = convert `operator[]()` into iterators;
- Vectorization = unroll loops to create SIMD instructions;
- Devirtualization of functions = bypass vtable of overriding function...

Here are a few intermediate take home messages:
- Cache misses are unavoidable -- each input data must be loaded at least once
- Cache misses are amazingly expensive -- 1 cache miss ~ 1000 instructions
- High-level optimization = minimize operations (algorithm, saves orders of magnitude)
- Mid-level optimization = minimize instructions per operation (implementation, saves factors)
- Low-level optimization = minimize cache misses per instruction (saves percents)
  - E.g. organize memory for expected computation
  - E.g. do everything you can with data already in cache


\section looping_benchmark-test_cases Benchmark test cases


\section looping_benchmark-old_results Benchmark intermediate results


\section looping_benchmark-results Updated benchmark results

*/
}