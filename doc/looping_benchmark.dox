namespace Cnes {
/**

\addtogroup looping_benchmark


\section looping_benchmark-intro Introduction


In this page, we compare different ways of looping over raster pixels.
Walltimes are measured, and pros and cons of each method are outlined.
Finally, guidelines are proposed to select the best approach for various use cases.

The benchmark is run as program `RasterBenchmarkIteration`.
Check the `--help` option for details.

\section looping_benchmark-test_cases Test cases


The benchmark consists in computing the pixel-wise sum `m_c` of two 3D rasters `m_a` and `m_b`
of shape `{m_width, m_height, m_depth}`.
The following test cases are implemented and will be compared hereafter:

- Use nested loops over axes, where X is the outermost loop (hereafter referred to as "x-y-z" test case):
  \snippet IterationBenchmark.cpp x-y-z
- Same as "x-y-z" with inverted loops ("z-y-x"):
  \snippet IterationBenchmark.cpp z-y-x
- Iterate over positions ("position"):
  \snippet IterationBenchmark.cpp position
- Loop over indices ("index"):
  \snippet IterationBenchmark.cpp index
- Iterate over pixel values ("value"):
  \snippet IterationBenchmark.cpp value
- Use `Raster::generate()` ("generate"):
  \snippet IterationBenchmark.cpp generate
- Use builtin operator `Raster::operator+()` ("operator"):
  \snippet IterationBenchmark.cpp operator

Note that in the position-based test cases ("x-y-z", "z-y-x" and "position"),
a simple optimization can be implemented by computing the index once instead of three times,
since the three rasters have the same shape:

\snippet IterationBenchmark.cpp position-index

Overall results and conclusions are not much impacted, and test cases are clearer and more flexible without optimization,
which is why the simpler version is used instead.


\section looping_benchmark-results Results and analysis


The shapes of the rasters are set to 400Â³ and the value type to `char`.
The benchmark consists in running 10 times each test case and comparing the minimum walltimes.
Absolute values are not relevant, only the relative deviations will be analyzed.

\image html doc/diagrams/looping_benchmark_crtp.svg

As ploted above, there are very significant discrepancies,
with one striking difference between the "x-y-z" and "z-y-x" cases.
Although they perform _exactly_ the same instructions on the same data, order is different.
In the first case, steps in the innermost loop are not contiguous in memory,
which results in many cache misses.
In the second case, the pixels are visited perfectly in order,
which minimizes cache misses.
There is no basic use case in which the "x-y-z" should be preferred.

Test case "position" is very close to "z-y-x" in the way it operates on the pixels:
they are visited in order, and the approach can be extended to rectangle regions easily.
Where "position" shines is when dimension is very high (having many nested loops should generally be avoided)
or when dimension is not even known at compile-time, in which case the approach of "z-y-x" is not applicable.
By contrast, "z-y-x" is easily parallelized
while "position" parallelization would require a manual partition of the iteration region.

The remaining test cases have in common the drawback that the knowledge of the position is lost
(there is no cheap way to get the position from the index).
While this is not relevant in the benchmark use case,
there might be situations in which the position is used in the evaluation of each pixel value.

Looping over indices is as efficient in terms of cache hits as the "z-y-x" and "position" cases.
Yet, iteration is much cheaper because the index is not computed from some formula at each iteration step:
it is simply incremeted.
Still, there are better approaches.

The value iterator is a fast option, and one which generalizes to more complex case, e.g. with strided iterators.
It could even be extended to region-wise loops.
This comes at the cost of verbosity and loss of clarity in the code.
Something which can be avoided through the use of `Raster::generate()`.
Indeed, "generate" compiles exactly the same way as "value",
thanks to the use of template metaprogramming under the hood.

Case "operator" is appealing in terms of readability.
Performance _seems_ comparable to other options in such a simple benchmark,
but this generalizes badly, and "generate" is preferrable in most situations.
Indeed, something like `m_c = m_a * m_a + m_b * m_b` loops three times over the rasters,
and produces intermediate objects, where:

\code
  m_c.generate(
      [](auto e, auto f) {
        return e * e + f * f;
      },
      m_a,
      m_b);
  );
\endcode

performs only one loop without a single temporary raster.
Solutions exist to avoid such pitfalls, like the expression templates used in XTensor or Eigen.
They are not part of Cnes.Raster, because they would add burden on the library
and could not match the "generate" performance anyway.

Results and a few guidelines are summarized in the following table.

<table class="fieldtable">
<tr><th>Test case<th>Run-time dimension<th>Region-wise iteration<th>Access to position<th>Character count<th>Use when...
<tr><td>x-y-z<td>No<td>Yes<td>Yes<td>127<td>Never! (Reverse loops order.)
<tr><td>z-y-x<td>No<td>Yes<td>Yes<td>127<td>Looping over regions of dimension known at compile-time.
<tr><td>position<td>Yes<td>Yes<td>Yes<td>52<td>Looping over regions of dimension known at run-time.
<tr><td>index<td>Yes<td>No<td>No<td>78<td>Never! (Prefer value iterator or operators.)
<tr><td>value<td>Yes<td>No<td>No<td>152<td>`Raster::generate()` does not fit.
<tr><td>generate<td>Yes<td>No<td>No<td>50<td>Whenever possible.
<tr><td>operator<td>Yes<td>No<td>No<td>12<td>Speed is less important than readability.
</table>

*/
}