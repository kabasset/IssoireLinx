namespace Litl {
/**

\addtogroup random


\section random-generate Random Values


`DataContainer::generate()` accepts any kind of callable as its first parameter, including functors.
When passing as only parameter some `RandomNoise`, the method can be used to generate random values.

In the following snippet, a Gaussian-distributed raster is generated,
with mean 100 and standard deviation 15.

\snippet LitlDemoRandom_test.cpp Generate Gaussian noise

The available distributions are listed at the bottom of the page.
Other distributions can be implemented: they just need to satisfy `RandomNoise` requirements. 


\section random-apply Random Noise


Similarly to `DataContainer::generate()`, `DataContainer::apply()` can be called with a random noise generator.
In this case, instead of generating random values, the method applies random noise to each input pixel,
which may be additive -- e.g. Gaussian noise -- or not -- e.g. Poisson noise.

For demonstration, let us add some salt and pepper noise to our random raster:

\snippet LitlDemoRandom_test.cpp Apply salt and pepper noise

Note that the raster values are `double`s while the generator values are `int`s.
Having different types is valid as long as the generator output type
can be converted into the pixel value type.


\section random-seed Seed and Reproducibility


Random number generation is a three-step process:
- First a so-called _seed_ is generated/computed/user-provided;
- Secondly, a random number (or set of) is generated by some _pseudo-random engine_, which follows a simple distribution;
- Lastly, the number is transformed/accepted or rejected in order to obey the target _distribution_.

Random noise generator constructors optionally take a seed as their last argument.
Setting the seed to special value -1 tells the random engine to use the current system time in seconds as seed.

Fixed seeds guarantee reproducibility of the results:
running the same program at different times produces the same results.
In contrast, time-dependent seeds allow independent runs of the programs to produce different samples,
which can be useful for further statistical analyses.

For simplest distributions (like uniform and Gaussian distributions),
only one random number per pixel is drawn by the engine and then transformed according to some formula
into a random variable of required statistic.

For more complex distributions, like in `PoissonNoise` and all distributions of the Poisson family,
several random drawings are necessary,
which increments the engine state several times to get a single output value.
When applying Poisson noise to some data,
the processing of each pixel triggers an amount of drawings which depends on the initial pixel value.
Consequently, changing the value of a single pixel in the container
changes the value of the noise of all subsequent pixels.
Hence, pixels cannot be considered independent.
This might be an issue in some circumstances.
To work around this, `StablePoissonNoise` scores a pixel-wise seed generator,
itself initialized with the user-provided seed,
which is used to update the seed deterministically for each and evey pixel.
Obviously, this solves the pixel-dependency issue at the cost of much longer processing.
Usage is equivalent to any other noise generator:

\snippet LitlDemoRandom_test.cpp Apply Poisson noise


\section radom-compound Compound Noises


More complex pixel-wise noise generators can be implemented easily.
For example, consider the noise model of some system composed of:

- Poisson photon noise, mean of which is the incoming flux;
- Gaussian-approximated electronic noise of mean and variance equal to the local dark current value.

As opposed to the previous examples, this model depends on _two_ values per pixel:
the photon flux and the dark current.
This will be reflected as an additional input to the `apply()` method.

We first build a simple functor to combine the two components, `operator()` of which takes two arguments:

\snippet LitlDemoRandom_test.cpp System noise

We can now generate the noisy image from an input flux map and an input dark current map:

\snippet LitlDemoRandom_test.cpp Apply system noise

Given that `generate()` and `apply()` accept an unlimited number of input rasters,
the method generalizes to more complex models (including non-random ones).

*/
}
