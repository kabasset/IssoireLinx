namespace Cnes {
/**

\addtogroup random


\section random-generate Random values


`DataContainer::generate()` accepts any kind of callable as its first parameter, including functors.
When passing as only parameter some `RandomNoise`, the method can be used to generate random values.

In the following snippet, a Gaussian-distributed raster is generated,
with mean 100 and standard deviation 15.

\snippet RasterDemoRandom_test.cpp Random values

The available distributions are listed at the bottom of the page.
Other distributions can be implemented: they just need to satisfy `RandomNoise` requirements. 


\section random-apply Random noise


Similarly to `DataContainer::generate()`, `DataContainer::apply()` can be called with a random noise generator.
In this case, instead of generating random values, the method applies random noise to each input pixel,
which may be additive -- e.g. Gaussian noise -- or not -- e.g. Poisson noise.

For demonstration, let us add some Poisson noise to our random raster:

\snippet RasterDemoRandom_test.cpp Random noise

If you're curious about the "stable" epithet, please read the next section,
or check the `PoissonNoise` and `StablePoissonNoise` documentations.


\section random-seed Seed and reproducibility


(Pseudo-)random number generation is a three-step process:
- First a so-called _seed_ is generated/computed/user-provided;
- Secondly, a random number (or set of) is generated by some _pseudo-random engine_, which follows a simple distribution;
- Lastly, the number is transformed/accepted or rejected in order to obey the target _distribution_.

Except `StablePoissonNoise`, random noise generators have both
a fixed-seed constructor, which accepts a user-defined value,
and a random-seed constructor, which uses the system time in seconds as seed.

Fixed-seed constructors guarantee reproducibility of the results:
running the same program at different times produces the same results.
In contrast, random-seed constructors allow independent runs of the programs to produce different samples,
which can be useful for further statistical analyses.

For simplest distributions (like uniform and Gaussian distributions),
only one random number per pixel is drawn by the engine and then transformed according to some formula
into a random variable of required statistic.

For more complex distributions, like those of the Poisson family,
several random drawings are necessary,
which increments the engine state several times to get a single output value.
When applying Poisson noise to some data,
the processing of each pixel triggers an amount of drawings which depends on the initial pixel value.
Therefore, pixels cannot be considered independent.
Changing the value of a single pixel in the container
changes the value of the noise of all subsequent pixels.
This might be an issue in some circumstances.
To work around this, `StablePoissonNoise` includes a seed generator,
itself initialized with the user-provided seed,
which is used to update the seed deterministically for each and evey pixel.
Obviously, this solves the issue at the cost of much longer processing.

*/
}
