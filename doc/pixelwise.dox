namespace Cnes {
/**

\addtogroup pixelwise


\section pixelwise-operators Operators


C++ operators are overloaded for rasters and scalars.
In-place (`+=`, `-=`, `*=`...) and new-instance (`+`, `-`, `*`...) versions are available.
The following examples for operator `+` holds for all operators;
`a` and `b` denote `Raster`s while `k` is some scalar.

\snippet RasterDemoPixelwise.cpp Operators

The complete list of available operators can be found in FIXME.


\section pixelwise-functions Functions


Pixel-wise mathematical functions are also provided
with in-place (`a.sin()`, `a.exp()`...) and new-instance (`Cnes::sin(a)`, `Cnes::exp(a)`...) versions.
The latter return `VecRaster`s.
Argument-dependent lookup (ADL) allows skipping the namespace in this case:

\snippet RasterDemoPixelwise.cpp Functions

The complete list of available functions can be found in `MathFunctionsMixin`'s documentation.


\section pixelwise-apply Apply and generate


To go further or to speed up computations, methods `Raster::apply()` and `Raster::generate()`
are the generic versions of in-place and new-instance operations, respectively.
They take as input the function to be applied (e.g. a functor or a lambda function)
and an unbounded number of input rasters (can be 0).

For example, to compute `a * k + b`, do:

\snippet RasterDemoPixelwise.cpp Generate

This is equivalent but much faster than doing simply:

\snippet RasterDemoPixelwise.cpp Formula

because intermediate variable `tmp = a * k` is not instanciated.
This is all the more true for formulae with more operations.

The in-place version, corresponding to `a = a * k + b`, is obtained with `apply()`:

\snippet RasterDemoPixelwise.cpp Apply

This can be seen as an equivalent to XTensor's or Eigen's lazy evaluations,
yet with arbitrary functions.

*/
}
