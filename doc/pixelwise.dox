namespace Litl {
/**

\addtogroup pixelwise


\section pixelwise-operators Operators


C++ operators are overloaded for rasters and scalars
to provide Euclidean ring arithmetic to rasters.
In-place (`+=`, `-=`, `*=`...) and new-instance (`+`, `-`, `*`...) versions are available.
The following examples for operator `+` holds for all operators;
`a` and `b` denote `Raster`s while `k` is some scalar.

\snippet LitlDemoPixelwise_test.cpp Operators

The complete list of available operators can be found in `EuclidArithmetic`.


\section pixelwise-functions Functions


Pixel-wise mathematical functions are also provided
with in-place (methods `a.sin()`, `a.exp()`...) and new-instance (free functions `Litl::sin(a)`, `Litl::exp(a)`...) versions.
Argument-dependent lookup (ADL) allows skipping the namespace in the latter case:

\snippet LitlDemoPixelwise_test.cpp Functions

The complete list of available in-place functions can be found in `MathFunctionsMixin`'s documentation.
New-instance versions are part of the `Litl` namespace documentation, and listed at the end of this page.


\section pixelwise-apply Generate and Apply


To go further or to speed up computations, methods `Raster::apply()` and `Raster::generate()`
are the generic versions of in-place and new-instance operations, respectively.
They take as input the function to be applied (e.g. free function, functor or lambda)
and an unbounded number of input rasters (can be 0).

For example, to compute `a * k + b`, do:

\snippet LitlDemoPixelwise_test.cpp Generate

This is equivalent but much faster than doing simply:

\snippet LitlDemoPixelwise_test.cpp Formula

because intermediate variable `tmp = a * k` is not instanciated.
This is all the more true for formulae with more operations.

The in-place version, corresponding to `a = a * k + b`, is obtained with `apply()`:

\snippet LitlDemoPixelwise_test.cpp Apply

This can be seen as an equivalent to XTensor's or Eigen's lazy evaluations,
yet with arbitrary functions.

For application of `generate()` and `apply()` to random noise, see \ref random.

*/
}
